/*------------------------------------*\
    $GRIDS
\*------------------------------------*/
/**
 * csswizardry grids provides you with widths to suit a number of breakpoints
 * designed around devices of a size you specify. Out of the box, csswizardry
 * grids caters to the following types of device:
 *
 * palm     --  palm-based devices, like phones and small tablets
 * lap      --  lap-based devices, like iPads or laptops
 * portable --  all of the above
 * desk     --  stationary devices, like desktop computers
 * regular  --  any/all types of device
 *
 * These namespaces are then used in the library to give you the ability to
 * manipulate your layouts based around them, for example:
 *
   <div class="grid__item  one-whole  lap--one-half  desk--one-third">
 *
 * This would give you a grid item which is 100% width unless it is on a lap
 * device, at which point it become 50% wide, or it is on a desktop device, at
 * which point it becomes 33.333% width.
 *
 * csswizardry grids also has push and pull classes which allow you to nudge
 * grid items left and right by a defined amount. These follow the same naming
 * convention as above, but are prepended by either `push--` or `pull--`, for
 * example:
 *
   `class="grid__item  one-half  push--one-half"`
 *
 * This would give you a grid item which is 50% width and pushed over to the
 * right by 50%.
 *
 * All classes in csswizardry grids follow this patten, so you should fairly
 * quickly be able to piece together any combinations you can imagine, for
 * example:
 *
   `class="grid__item  one-whole  lap--one-half  desk--one-third  push--desk--one-third"`
 *
   `class="grid__item  one-quarter  palm--one-half  push--palm--one-half"`
 *
   `class="grid__item  palm--one-third  desk--five-twelfths"`
 */


/**
 * You do not need to edit anything from this line onward; csswizardry-grids is
 * good to go. Happy griddin’!
 */
$class-type:            unquote(".");

$use-silent-classes: false;
@if $use-silent-classes == true{
    $class-type:        unquote("%");
}





/*------------------------------------*\
    $GRID SETUP
\*------------------------------------*/
/**
 * 1. Allow the grid system to be used on lists.
 * 2. Remove any margins and paddings that might affect the grid system.
 * 3. Apply a negative `margin-left` to negate the columns’ gutters.
 */
.wrapper{
	@extend %center;
	@extend .soft--sides;
}


#{$class-type}grid{
	@include clearfix;
    list-style:none;                /* [1] */
    margin:0;                       /* [2] */
    padding:0;                      /* [2] */
    margin-left:-$gutter;           /* [3] */
    margin-right:-$gutter;           /* [3] */
	
    @if $use-markup-fix != true{
        letter-spacing:-0.31em;
    }
	
}



@if $use-markup-fix != true{
    /* Opera hack */
    .opera:-o-prefocus,
    #{$class-type}grid{
        word-spacing:-0.43em;
    }
}


    /**
     * 1. Cause columns to stack side-by-side.
     * 2. Space columns apart.
     * 3. Align columns to the tops of each other.
     * 4. Full-width unless told to behave otherwise.
     * 5. Required to combine fluid widths and fixed gutters.
     */
    #{$class-type}grid__item{
		@extend %plr4;
		
       // display:inline-block;           /* [1] */
	    float: left;
        padding-left:$gutter;           /* [2] */
        vertical-align:top;             /* [3] */
		
        @if $mobile-first == true{
            width:100%;                 /* [4] */
        }
        -webkit-box-sizing:border-box;  /* [5] */
           -moz-box-sizing:border-box;  /* [5] */
                box-sizing:border-box;  /* [5] */
        @if $use-markup-fix != true{
            letter-spacing:normal;
            word-spacing:normal;
        }
    }
	
	
	
	
/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Create our width classes, prefixed by the specified namespace.
 */
@mixin device-type($namespace:""){
    /**
     * Thirds
     */
    #{$class-type}#{$namespace}one-third         { width:33.333%; }
    #{$class-type}#{$namespace}two-thirds        { width:66.666%; }


    /**
     * Quarters
     */
    #{$class-type}#{$namespace}one-quarter       { width:25%; }
    #{$class-type}#{$namespace}two-quarters      { @extend #{$class-type}#{$namespace}one-half; }
    #{$class-type}#{$namespace}three-quarters    { width:75%; }

}


/**
 * Our regular, non-responsive width classes.
 */
@include device-type();


/**
 * Our responsive classes, if we have enabled them.
 */
@if $responsive == true{

    @each $name in $breakpoint-has-widths {
        @include grid-media-query($name) {
           @include device-type('#{$name}--');
        }
    }


}